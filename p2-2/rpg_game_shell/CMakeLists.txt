# This file was automagically generated by mbed.org.
# If you would like to add your own targets, create a
# project.cmake file locally in your project directory.

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)
SET(CMAKE_SYSTEM_NAME Generic)
#SET(CMAKE_SYSTEM_PROCESSOR arm)
SET(CMAKE_CROSSCOMPILING TRUE)

# force compiler settings
SET(CMAKE_C_COMPILER_WORKS TRUE)
SET(CMAKE_CXX_COMPILER_WORKS TRUE)

# force cmake compilers
SET(CMAKE_ASM_COMPILER    "arm-none-eabi-gcc")
SET(CMAKE_C_COMPILER      "arm-none-eabi-gcc")
SET(CMAKE_CXX_COMPILER    "arm-none-eabi-g++")
SET(ELF2BIN               "arm-none-eabi-objcopy")


# if the environment does not specify build type, set to Debug
IF(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Debug"
        CACHE STRING "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."
        FORCE)
ENDIF()

# here starts the project
PROJECT(rpg_game_shell C CXX ASM)

# uncomment below to have a verbose build process
#SET(CMAKE_VERBOSE_MAKEFILE ON)

SET(LD_SYS_LIBS "-Wl,--start-group -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys -lmbed -Wl,--end-group")

SET(CMAKE_C_FLAGS "-std=gnu99 -Wall -fmessage-length=0 -fno-exceptions -fno-builtin -ffunction-sections -fdata-sections -mcpu=cortex-m3 -mthumb -DMBED_ROM_START=0x0 -DMBED_ROM_SIZE=0x80000 -include mbed_config.h")
SET(CMAKE_CXX_FLAGS "-std=gnu++98 -Wall -fmessage-length=0 -fno-exceptions -fno-builtin -ffunction-sections -fdata-sections -mcpu=cortex-m3 -mthumb -DMBED_ROM_START=0x0 -DMBED_ROM_SIZE=0x80000  -include mbed_config.h")
SET(CMAKE_ASM_FLAGS "-x assembler-with-cpp -Wall -fmessage-length=0 -fno-exceptions -fno-builtin -ffunction-sections -fdata-sections -mcpu=cortex-m3 -mthumb  -include mbed_config.h")
SET(CMAKE_CXX_LINK_FLAGS "-Wl,--gc-sections -mcpu=cortex-m3 -mthumb  -L${CMAKE_CURRENT_SOURCE_DIR}/mbed/TARGET_LPC1768/TOOLCHAIN_GCC_ARM ")
SET(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} ${LD_SYS_LIBS} -T ${CMAKE_BINARY_DIR}/rpg_game_shell_pp.link_script.ld")

ADD_DEFINITIONS(
  -DARM_MATH_CM3
  -DDEVICE_ANALOGIN=1
  -DDEVICE_ANALOGOUT=1
  -DDEVICE_CAN=1
  -DDEVICE_DEBUG_AWARENESS=1
  -DDEVICE_EMAC=1
  -DDEVICE_ETHERNET=1
  -DDEVICE_FLASH=1
  -DDEVICE_I2C=1
  -DDEVICE_I2CSLAVE=1
  -DDEVICE_INTERRUPTIN=1
  -DDEVICE_LOCALFILESYSTEM=1
  -DDEVICE_PORTIN=1
  -DDEVICE_PORTINOUT=1
  -DDEVICE_PORTOUT=1
  -DDEVICE_PWMOUT=1
  -DDEVICE_RTC=1
  -DDEVICE_SEMIHOST=1
  -DDEVICE_SERIAL=1
  -DDEVICE_SERIAL_FC=1
  -DDEVICE_SLEEP=1
  -DDEVICE_SPI=1
  -DDEVICE_SPISLAVE=1
  -DDEVICE_STDIO_MESSAGES=1
  -DDEVICE_USTICKER=1
  -DMBED_BUILD_TIMESTAMP=1542325004.6
  -DTARGET_CORTEX
  -DTARGET_CORTEX_M
  -DTARGET_LIKE_CORTEX_M3
  -DTARGET_LIKE_MBED
  -DTARGET_LPC1768
  -DTARGET_LPC176X
  -DTARGET_LPCTarget
  -DTARGET_M3
  -DTARGET_MBED_LPC1768
  -DTARGET_NXP
  -DTARGET_NXP_EMAC
  -DTARGET_RELEASE
  -DTOOLCHAIN_GCC
  -DTOOLCHAIN_GCC_ARM
  -D__CMSIS_RTOS
  -D__CORTEX_M3
  -D__MBED_CMSIS_RTOS_CM
  -D__MBED__=1
  )
INCLUDE_DIRECTORIES(
  mbed/TARGET_LPC1768
  mbed
  SDFileSystem/FATFileSystem/ChaN
  SDFileSystem/FATFileSystem
  SDFileSystem
  .
  )

# executable rpg_game_shell
ADD_EXECUTABLE(rpg_game_shell
  SDFileSystem/FATFileSystem/ChaN/ccsbcs.cpp
  SDFileSystem/FATFileSystem/ChaN/diskio.cpp
  SDFileSystem/FATFileSystem/ChaN/diskio.h
  SDFileSystem/FATFileSystem/ChaN/ff.cpp
  SDFileSystem/FATFileSystem/ChaN/ff.h
  SDFileSystem/FATFileSystem/ChaN/ffconf.h
  SDFileSystem/FATFileSystem/ChaN/integer.h
  SDFileSystem/FATFileSystem/FATDirHandle.cpp
  SDFileSystem/FATFileSystem/FATDirHandle.h
  SDFileSystem/FATFileSystem/FATFileHandle.cpp
  SDFileSystem/FATFileSystem/FATFileHandle.h
  SDFileSystem/FATFileSystem/FATFileSystem.cpp
  SDFileSystem/FATFileSystem/FATFileSystem.h
  SDFileSystem/SDFileSystem.cpp
  SDFileSystem/SDFileSystem.h
  globals.h
  graphics.cpp
  graphics.h
  hardware.cpp
  hardware.h
  hash_table.cpp
  hash_table.h
  main.cpp
  map.cpp
  map.h
  mbed/AnalogIn.h
  mbed/AnalogOut.h
  mbed/BusIn.h
  mbed/BusInOut.h
  mbed/BusOut.h
  mbed/CAN.h
  mbed/CallChain.h
  mbed/DigitalIn.h
  mbed/DigitalInOut.h
  mbed/DigitalOut.h
  mbed/DirHandle.h
  mbed/Ethernet.h
  mbed/FileBase.h
  mbed/FileHandle.h
  mbed/FileLike.h
  mbed/FilePath.h
  mbed/FileSystemLike.h
  mbed/FunctionPointer.h
  mbed/I2C.h
  mbed/I2CSlave.h
  mbed/InterruptIn.h
  mbed/InterruptManager.h
  mbed/LocalFileSystem.h
  mbed/PortIn.h
  mbed/PortInOut.h
  mbed/PortOut.h
  mbed/PwmOut.h
  mbed/RawSerial.h
  mbed/SPI.h
  mbed/SPISlave.h
  mbed/Serial.h
  mbed/SerialBase.h
  mbed/Stream.h
  mbed/TARGET_LPC1768/LPC17xx.h
  mbed/TARGET_LPC1768/PeripheralNames.h
  mbed/TARGET_LPC1768/PinNames.h
  mbed/TARGET_LPC1768/PortNames.h
  mbed/TARGET_LPC1768/cmsis.h
  mbed/TARGET_LPC1768/cmsis_nvic.h
  mbed/TARGET_LPC1768/core_cm0.h
  mbed/TARGET_LPC1768/core_cm0plus.h
  mbed/TARGET_LPC1768/core_cm3.h
  mbed/TARGET_LPC1768/core_cm4.h
  mbed/TARGET_LPC1768/core_cm4_simd.h
  mbed/TARGET_LPC1768/core_cmFunc.h
  mbed/TARGET_LPC1768/core_cmInstr.h
  mbed/TARGET_LPC1768/device.h
  mbed/TARGET_LPC1768/gpio_object.h
  mbed/TARGET_LPC1768/objects.h
  mbed/TARGET_LPC1768/system_LPC17xx.h
  mbed/Ticker.h
  mbed/Timeout.h
  mbed/Timer.h
  mbed/TimerEvent.h
  mbed/analogin_api.h
  mbed/analogout_api.h
  mbed/can_api.h
  mbed/can_helper.h
  mbed/error.h
  mbed/ethernet_api.h
  mbed/gpio_api.h
  mbed/gpio_irq_api.h
  mbed/i2c_api.h
  mbed/mbed.h
  mbed/mbed_debug.h
  mbed/mbed_interface.h
  mbed/pinmap.h
  mbed/platform.h
  mbed/port_api.h
  mbed/pwmout_api.h
  mbed/rtc_api.h
  mbed/rtc_time.h
  mbed/semihost_api.h
  mbed/serial_api.h
  mbed/sleep_api.h
  mbed/spi_api.h
  mbed/toolchain.h
  mbed/us_ticker_api.h
  mbed/wait_api.h
  mbed_config.h
  speech.cpp
  speech.h
  )
SET_TARGET_PROPERTIES(rpg_game_shell PROPERTIES ENABLE_EXPORTS 1)
# add syslibs dependencies to create the correct linker order
TARGET_LINK_LIBRARIES(rpg_game_shell -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys)

add_custom_command(TARGET rpg_game_shell PRE_LINK
                   COMMAND "arm-none-eabi-cpp" -E -P -Wl,--gc-sections -mcpu=cortex-m3 -mthumb mbed/TARGET_LPC1768/TOOLCHAIN_GCC_ARM/LPC1768.ld -o ${CMAKE_CURRENT_BINARY_DIR}/rpg_game_shell_pp.link_script.ld
                   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                   BYPRODUCTS "${CMAKE_CURRENT_BINARY_DIR}/rpg_game_shell_pp.link_script.ld"
                   )

add_custom_command(TARGET rpg_game_shell POST_BUILD
                   COMMAND ${ELF2BIN} -O ihex $<TARGET_FILE:rpg_game_shell> $<TARGET_FILE:rpg_game_shell>.hex
                   COMMAND ${CMAKE_COMMAND} -E echo "-- built: $<TARGET_FILE:rpg_game_shell>.hex"
                  )




##########################################################################
# mbed-cli specific targets
##########################################################################

# detect the build type and select the corresponding cli profile
SET(MBED_BUILD_PROFILE "")
STRING(TOLOWER ${CMAKE_BUILD_TYPE} LOWERCASE_CMAKE_BUILD_TYPE)
IF(LOWERCASE_CMAKE_BUILD_TYPE MATCHES debug)
    SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/debug.json")
ELSEIF(LOWERCASE_CMAKE_BUILD_TYPE MATCHES relwithdebinfo)
    SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/develop.json")
ELSEIF(LOWERCASE_CMAKE_BUILD_TYPE MATCHES release)
    SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/release.json")
ELSEIF(LOWERCASE_CMAKE_BUILD_TYPE MATCHES minsizerel)
    SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/release.json")
ELSE()
  MESSAGE(WARNING "Build type '${CMAKE_BUILD_TYPE}' is unknown, using debug profile")
  SET(MBED_BUILD_PROFILE "mbed-os/tools/profiles/debug.json")
ENDIF()

# optional custom target to build via mbed-cli
ADD_CUSTOM_TARGET(mbed-cli-build
        COMMAND ${CMAKE_COMMAND} -E echo "mbed compile --build BUILD/${CMAKE_BUILD_TYPE} --profile ${MBED_BUILD_PROFILE}"
        COMMAND mbed compile --build BUILD/${CMAKE_BUILD_TYPE} --profile ${MBED_BUILD_PROFILE}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        SOURCES ${SOURCE_FILES} ${SYS_SOURCE_FILES})

IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/project.cmake)
  INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/project.cmake)
ELSE()
  MESSAGE(STATUS "Add a local project.cmake file to add your own targets.")
ENDIF()

# this will take care of binary directories generated by cmake/clion not to confuse the cli build
FILE(GENERATE OUTPUT "${CMAKE_BINARY_DIR}/.mbedignore" CONTENT "*")